// Check SUM : 
#include <bits/stdc++.h>
using namespace std;
string binaryadd(string A, string B)
{
    string res;
    char carry = '0';
    for (int i = A.length() - 1; i >= 0; i--)
    {
        if (A[i] == '1' && B[i] == '1')
        {
            if (carry == '1')
                res.push_back('1'), carry = '1';
            else
                res.push_back('0'), carry = '1';
        }
        else if (A[i] == '0' && B[i] == '0')
        {
            if (carry == '1')
                res.push_back('1'), carry = '0';
            else
                res.push_back('0'), carry = '0';
        }
        else if (A[i] != B[i])
        {
            if (carry == '1')
                res.push_back('0'), carry = '1';
            else
                res.push_back('1'), carry = '0';
        }
    }
    if (carry == '1')
    {
        string cc = "00000001";
        return binaryadd(cc, res);
    }
    return res;
}
string comp(string a)
{
    string b = "";
    for (int i = 0; i < a.size(); i++)
    {
        if (a[i] == '1')
            b += "0";
        else
            b += "1";
    }
    return b;
}
string check(string s)
{
    while (s.size() % 8 != 0)
    {
        s = "0" + s;
    }
    vector<string> partition;
    for (int i = 0; i < s.size(); i += 8)
    {
        partition.push_back(s.substr(i, 8));
    }
    string f = partition[0];
    for (int i = 1; i < partition.size(); i++)
    {
        f = binaryadd(f, partition[i]);
    }
    return f;
}
int main()
{
    string sender;
    string receiver;
    cout << "Enter the message in sender's side :";
    cin >> sender;
    cout << "Enter the receiver's message :";
    cin >> receiver;
    string ans1 = check(sender);
    ans1 = comp(ans1);
    string ans2 = check(receiver);
    string finalans = binaryadd(ans1, ans2);
    finalans = comp(finalans);
    cout << "The answer after doing checksum :" << finalans << "\n";
    for (int i = 0; i < finalans.size(); i++)
    {
        if (finalans[i] == '1')
        {
            cout << "Rejected\n";
            return 0;
        }
    }
    cout << "Accepted\n";
}


// CRC : 
//Cyclic Redundancy Check
#include<bits/stdc++.h>
using namespace std;
int main(){
    string dividend;
    cin>>dividend;
    string divisor;
    cin>>divisor;
    int addZeros = divisor.length()-1;
    for(int i = 0;i<addZeros;i++) dividend+='0';
    string div = dividend.substr(0,divisor.length());
    bool start = true;
    for(int i = 0;i<dividend.length()-divisor.length();i++){
        if(start && dividend[i]=='0'){
            div=dividend.substr(i+1,divisor.length());
            continue;
        }
        start = false;
        string temp = "";
        if(div[0]!='0'){
            for(int j = 0;j<divisor.length();j++){
                if(div[j]==divisor[j]){
                    temp+='0';
                }
                else{
                    temp+='1';
                }
            }
            div=temp.substr(1,temp.length());
            div+=dividend[i+divisor.length()];
        }
        else{
            div=div.substr(1,div.length());
            div+=dividend[i+divisor.length()];
        }
    }
    div=div.substr(1,div.length());
    cout<<div<<endl;
    string r;cin>>r;
    r+=div;
    div=r.substr(0,divisor.length());
    start=true;
    for(int i = 0;i<r.length()-divisor.length();i++){
        if(start && r[i]=='0'){
            div=r.substr(i+1,divisor.length());
            continue;
        }
        start = false;
        string temp = "";
        if(div[0]!='0'){
            for(int j = 0;j<divisor.length();j++){
                if(div[j]==divisor[j]){
                    temp+='0';
                }
                else{
                    temp+='1';
                }
            }
            div=temp.substr(1,temp.length());
            div+=r[divisor.length()+i];
        }
        else{
            div=div.substr(1,div.length());
            div+=r[divisor.length()+i];
        }
    }
    cout<<"div::"<<div<<endl;
    div=div.substr(1,div.length());
    bool flag = true;
    for(auto it:div) if(it!='0') flag = false;
    if(flag) cout<<"accept"<<endl;
    else cout<<"reject"<<endl;
    return 0;
}
// 1101011011
// 10011

// GOBACKN:
#include<bits/stdc++.h>
using namespace std;
int main(){
    cout<<"Enter the number of frames to be sent:"<<endl;
    int frames;cin>>frames;
    cout<<"Enter the nth frame lost:"<<endl;
    int lost;cin>>lost;
    cout<<"Enter the window size:"<<endl;
    int win;cin>>win;
    int count = 0;
    int f = 1;
    vector<int>ans;
    while(f<=frames){
        ans.push_back(f);
        count++;
        if(count%lost==0){
            count=0;
            for(int j=f+1;j<f+win && j<=frames;j++){
                ans.push_back(j);
                count++;
            }
        }
        else{
            f++;
        }
    }
    for(auto it:ans) cout<<it<<" ";
    return 0;
}

// HAMMING CODE : 

#include<bits/stdc++.h>
using namespace std;
int main(){
    string input;
    cin>>input;
    int m = input.length();
    int p = 0;
    while(pow(2,p)<p+m+1) p++;
    int size = m+p;
    char arr[size+1];
    int k = m;
    int x = 0;
    for(int i = 1;i<=size;i++){
        if(pow(2,x)!=i){
            arr[i]=input[--k];
        }
        else{
            x++;
        }
    }
    x=0;
    for(int i = 1;i<=size;i++){
        if(pow(2,x)==i){
            x++;
            int par = 0;
            for(int j = i;j<=size;j+=2*i){
                for(int k = j;k<j+i && k<=size;k++){
                    if(k!=i){
                        if(arr[k]=='1') par++;
                    }
                }
            }
            if(par%2==0) arr[i]='0';
            else arr[i]='1';
        }
    }
    cout<<"Hamming Code:";
    for(int i = size;i>0;i--) cout<<arr[i];
    cout<<endl;
    string r;
    cin>>r;
    char arr1[size+1];
    k=r.length();
    for(int i = 1;i<=size;i++){
        arr1[i]=r[--k];
    }
    x=0;
    bool ans = true;
    string aa = "";
    for(int i = 1;i<=size;i++){
        if(pow(2,x)==i){
            x++;
            int par = 0;
            for(int j = i;j<=size;j+=2*i){
                for(int k = j;k<j+i && k<=size;k++){
                    if(arr1[k]=='1') par++;
                }
            }
            if(par%2!=0){
                ans=false;
                aa+='1';
            }
            else{
                aa+='0';
            }
        }
    }
    if(ans){
        cout<<"no error"<<endl;
    }
    else{
        cout<<"error at:"<<endl;
        int a = 0;
        for(int i = 0;i<aa.size();i++){
            if(aa[i]=='1'){
                a+=pow(2,i);
            }
        }
        cout<<a<<endl;
    }
    return 0;
}

// SELECTIVE REPEAT:
#include<bits/stdc++.h>
using namespace std;
int main(){
    cout<<"Enter the number of frames to be sent:"<<endl;
    int frames;cin>>frames;
    cout<<"Enter the nth frame that is lost:"<<endl;
    int lost;cin>>lost;
    cout<<"Enter the window size:"<<endl;
    int win;cin>>win;
    int f = 1;
    int count = 0;
    vector<int>ans;
    while(f<=frames){
        ans.push_back(f);
        count++;
        if(count==lost){
            count=0;
            int j = 0;
            for(j=f+1;j<f+win && j<=frames;j++){
                ans.push_back(j);
                count++;
            }
            ans.push_back(f);
            count++;
            f=j;
        }
        else{
            f++;
        }
    }
    for(auto it:ans) cout<<it<<" ";
}

// SIMPLE PARITY :
#include<bits/stdc++.h>
using namespace std;
int main()
{
    string data;
    cout<<"Enter sender data\n";
    cin>>data;
    int parity=0;
    for(int i=0;i<data.length();i++)
    {
        if(data[i]=='1')parity++;
    }
    string encoded_data=data;
    if(parity%2==0)
        encoded_data+="0";
    else
    encoded_data+="1";
    cout<<encoded_data<<endl;
    cout<<"Enter receiver data\n";
    string rdata;
    cin>>rdata;
    parity=0;
    for(int i=0;i<rdata.length();i++)
    {
        if(rdata[i]=='1')parity++;
    }
    if(parity%2==0 && encoded_data==rdata)
        cout<<"Valid\n";
    else
        cout<<"Not Valid\n";
    return 0;
}



// STOPNWAIT : 
#include<iostream>
#include <chrono>
#include <thread>
using namespace std;
int main()
{
    int frame_count,frame_lost;
    cout<<"Enter the number of frames sent:";
    cin>>frame_count;
    cout<<"Enter the interval (every nth frame) at which frames are lost:   ";
    cin>>frame_lost;
    int total_transmitted_frames=1;
    int retransmitted_frames=0;
    for(int i=1;i<=frame_count;)
    {
        if(total_transmitted_frames%frame_lost!=0)
        {
            cout<<"Frame "<<i<<"  is transmitted and Received."<<endl;
            i++;
        }
        else
        {
            cout<<"Frame "<<i<<" Lost"<<endl;
            cout<<"Frame "<<i<<" is retransmitted"<<endl;
            retransmitted_frames++;
        }
    total_transmitted_frames++;
    this_thread::sleep_for(chrono::milliseconds(1));
    }
    cout<<"Total Frames Sent: "<<retransmitted_frames+frame_count<<endl;
    cout<<"Number of Frame retransmitted: "<<retransmitted_frames<<endl;
}


// 2-D PARITY CHECK :
#include <bits/stdc++.h>
using namespace std;

// int main()?
{
    vector<vector<char>> a;
    for(int i=0;i<4;i++){
        string b;
        cout<<"enter data of ";
        cout<<" 8 bits : ";
        cin>>b;
        vector<char> c;
        for(int j=0;j<8;j++){
            c.push_back(b[j]);
        }
        a.push_back(c);
    }
    cout<<"input data is : "<<endl;
    for(int i=0;i<4;i++){
        for(int j=0;j<8;j++){
            cout<<a[i][j]<<" ";
        }
        cout<<endl;
    }
//  for coloumn
for(int i=0;i<4;i++){
int h =0;
    vector<char> d;
    for(int j=0;j<8;j++){
        d.push_back(a[i][j]);
        if(a[i][j]=='1'){
            h++;
        }
    }
    if(h%2==0){
        d.push_back('0');
    }
    else{
        d.push_back('1');
    }
    a[i]=d;
}
vector<char> an;

for(int i=0;i<9;i++){
    int f=0;
    for(int j=0;j<4;j++){
        if(a[j][i]=='1'){
            f++;
        }
    }
    if(f%2==0){
        an.push_back('0');
    }
    else{
        an.push_back('1');
    }
}
a.push_back(an);
cout<<"output data"<<endl;

    for(int i=0;i<5;i++){
        for(int j=0;j<9;j++){
            cout<<a[i][j]<<" ";
        }
        cout<<endl;
    }
    return 0;
}
